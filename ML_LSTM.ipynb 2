
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***This notebook is mainly written by Yuan and Yoyo for the end-of-semester project of Machine Learning, Fall 2020***\n"
   ]
  },
  {
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Activation, Flatten, LSTM, TimeDistributed, RepeatVector\n",
    "from keras.layers.normalization import BatchNormalization\n",
    "from keras.optimizers import Adam\n",
    "from keras.callbacks import EarlyStopping, ModelCheckpoint\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>visitor_outflow</th>\n",
       "      <th>pop_outflow</th>\n",
       "      <th>visitor_inflow</th>\n",
       "      <th>pop_inflow</th>\n",
       "      <th>negative</th>\n",
       "      <th>positive</th>\n",
       "      <th>totalTestResults</th>\n",
       "      <th>allbed_mean</th>\n",
       "      <th>ICUbed_mean</th>\n",
       "      <th>InvVen_mean</th>\n",
       "      <th>admis_mean</th>\n",
       "      <th>newICU_mean</th>\n",
       "      <th>mobility_composite</th>\n",
       "      <th>total_pop</th>\n",
       "      <th>death</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-04-02</td>\n",
       "      <td>911906</td>\n",
       "      <td>9566649</td>\n",
       "      <td>904113</td>\n",
       "      <td>9582535</td>\n",
       "      <td>7503</td>\n",
       "      <td>1233</td>\n",
       "      <td>8736</td>\n",
       "      <td>224.946291</td>\n",
       "      <td>81.876268</td>\n",
       "      <td>57.296591</td>\n",
       "      <td>15.312697</td>\n",
       "      <td>7.590339</td>\n",
       "      <td>-35.207619</td>\n",
       "      <td>4977688.275</td>\n",
       "      <td>6</td>\n",
       "      <td>32.318231</td>\n",
       "      <td>-86.902298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-04-03</td>\n",
       "      <td>974948</td>\n",
       "      <td>10292520</td>\n",
       "      <td>969556</td>\n",
       "      <td>10335855</td>\n",
       "      <td>8187</td>\n",
       "      <td>1432</td>\n",
       "      <td>9619</td>\n",
       "      <td>246.399825</td>\n",
       "      <td>89.349936</td>\n",
       "      <td>62.432738</td>\n",
       "      <td>16.178042</td>\n",
       "      <td>8.042432</td>\n",
       "      <td>-35.667289</td>\n",
       "      <td>4977688.275</td>\n",
       "      <td>3</td>\n",
       "      <td>32.318231</td>\n",
       "      <td>-86.902298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-04-04</td>\n",
       "      <td>854480</td>\n",
       "      <td>9205708</td>\n",
       "      <td>852529</td>\n",
       "      <td>9277032</td>\n",
       "      <td>9273</td>\n",
       "      <td>1580</td>\n",
       "      <td>10853</td>\n",
       "      <td>266.754599</td>\n",
       "      <td>96.413430</td>\n",
       "      <td>67.261197</td>\n",
       "      <td>16.916438</td>\n",
       "      <td>8.432862</td>\n",
       "      <td>-36.044666</td>\n",
       "      <td>4977688.275</td>\n",
       "      <td>8</td>\n",
       "      <td>32.318231</td>\n",
       "      <td>-86.902298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>699333</td>\n",
       "      <td>7848208</td>\n",
       "      <td>696765</td>\n",
       "      <td>7892404</td>\n",
       "      <td>11282</td>\n",
       "      <td>1796</td>\n",
       "      <td>13078</td>\n",
       "      <td>273.266913</td>\n",
       "      <td>97.884635</td>\n",
       "      <td>68.174187</td>\n",
       "      <td>17.527168</td>\n",
       "      <td>8.760063</td>\n",
       "      <td>-36.334809</td>\n",
       "      <td>4977688.275</td>\n",
       "      <td>2</td>\n",
       "      <td>32.318231</td>\n",
       "      <td>-86.902298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-04-06</td>\n",
       "      <td>815949</td>\n",
       "      <td>9098459</td>\n",
       "      <td>809844</td>\n",
       "      <td>9118196</td>\n",
       "      <td>12797</td>\n",
       "      <td>1968</td>\n",
       "      <td>14765</td>\n",
       "      <td>287.322866</td>\n",
       "      <td>101.783974</td>\n",
       "      <td>70.768875</td>\n",
       "      <td>18.017711</td>\n",
       "      <td>9.026577</td>\n",
       "      <td>-36.532078</td>\n",
       "      <td>4977688.275</td>\n",
       "      <td>5</td>\n",
       "      <td>32.318231</td>\n",
       "      <td>-86.902298</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    datetime  visitor_outflow  pop_outflow  visitor_inflow  pop_inflow  \\\n",
       "0 2020-04-02           911906      9566649          904113     9582535   \n",
       "1 2020-04-03           974948     10292520          969556    10335855   \n",
       "2 2020-04-04           854480      9205708          852529     9277032   \n",
       "3 2020-04-05           699333      7848208          696765     7892404   \n",
       "4 2020-04-06           815949      9098459          809844     9118196   \n",
       "\n",
       "   negative  positive  totalTestResults  allbed_mean  ICUbed_mean  \\\n",
       "0      7503      1233              8736   224.946291    81.876268   \n",
       "1      8187      1432              9619   246.399825    89.349936   \n",
       "2      9273      1580             10853   266.754599    96.413430   \n",
       "3     11282      1796             13078   273.266913    97.884635   \n",
       "4     12797      1968             14765   287.322866   101.783974   \n",
       "\n",
       "   InvVen_mean  admis_mean  newICU_mean  mobility_composite    total_pop  \\\n",
       "0    57.296591   15.312697     7.590339          -35.207619  4977688.275   \n",
       "1    62.432738   16.178042     8.042432          -35.667289  4977688.275   \n",
       "2    67.261197   16.916438     8.432862          -36.044666  4977688.275   \n",
       "3    68.174187   17.527168     8.760063          -36.334809  4977688.275   \n",
       "4    70.768875   18.017711     9.026577          -36.532078  4977688.275   \n",
       "\n",
       "   death   latitude  longitude  \n",
       "0      6  32.318231 -86.902298  \n",
       "1      3  32.318231 -86.902298  \n",
       "2      8  32.318231 -86.902298  \n",
       "3      2  32.318231 -86.902298  \n",
       "4      5  32.318231 -86.902298  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/Users/zhangyumeng/Desktop/all_us_data4.csv')   \n",
    "df = df.drop(columns = 'location_name')\n",
    "df[\"datetime\"] = pd.to_datetime(df[\"datetime\"])\n",
    "#df = df.set_index(['datetime'], drop=True)\n",
    "#    df = df.groupby('datetime').sum().reset_index()\n",
    "#    df = df[['datetime','daily_death']]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Add dumy as colunms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def augFeatures(data):\n",
    "#  train[\"year\"] = train[\"datetime\"].dt.year\n",
    "    data[\"month\"] = data[\"datetime\"].dt.month\n",
    "    data[\"date\"] = data[\"datetime\"].dt.day\n",
    "    data[\"day\"] = data[\"datetime\"].dt.dayofweek\n",
    "    return data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Split data to training dataset and validation dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def splitData(X,Y,rate):\n",
    "    \n",
    "    X_train = X[int(X.shape[0]*rate):]\n",
    "    Y_train = Y[int(Y.shape[0]*rate):]\n",
    "    X_val = X[:int(X.shape[0]*rate)]\n",
    "    Y_val = Y[:int(Y.shape[0]*rate)]\n",
    "    \n",
    "    return X_train, Y_train, X_val, Y_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize(df):\n",
    "    scaler = StandardScaler()\n",
    "    columns = df.columns[2:]\n",
    "    df_variables = df.iloc[:, 2:]\n",
    "    df_normalized = pd.DataFrame(scaler.fit_transform(df_variables))\n",
    "    df_normalized.columns = columns\n",
    "    #df_normalized.insert(0, 'location_name', pd.Series(df['location_name']))\n",
    "    #df_normalized.insert(0, 'datetime', pd.Series(df['datetime']))\n",
    "    return df_normalized"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Inverse_nomalise(before,after):\n",
    "    result = []\n",
    "    result.append((float(after[i]) + 1 ) * float(before[i]))\n",
    "    return result  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a training dataset that usable by Keras LSTM model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def buildTrain(train, pastDay=10, futureDay=1):\n",
    "    \n",
    "    X_train, Y_train = [], []\n",
    "    for i in range(train.shape[0]-futureDay-pastDay):\n",
    "        X_train.append(np.array(train.iloc[i:i+pastDay]))\n",
    "        Y_train.append(np.array(train.iloc[i+pastDay:i+pastDay+futureDay][\"death\"]))\n",
    "    return np.array(X_train), np.array(Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def shuffle(X,Y):\n",
    "    \n",
    "    np.random.seed(10)\n",
    "    randomList = np.arange(X.shape[0])\n",
    "    np.random.shuffle(randomList)\n",
    "    return X[randomList], Y[randomList]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def buildManyToOneModel(shape):\n",
    "    \n",
    "    model = Sequential()\n",
    "    model.add(LSTM(40, activation='softmax',input_shape=(X_train.shape[1], X_train.shape[2]), return_sequences=False))\n",
    "    model.add(Dense(1, activation='linear'))\n",
    "    opt = Adam(learning_rate=0.01)\n",
    "    model.compile(loss='mean_squared_error', optimizer=opt) \n",
    "    model.summary()\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_1 (LSTM)                (None, 40)                9600      \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1)                 41        \n",
      "=================================================================\n",
      "Total params: 9,641\n",
      "Trainable params: 9,641\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.5776 - val_loss: 0.6585\n",
      "Epoch 2/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.3921 - val_loss: 0.5144\n",
      "Epoch 3/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.3272 - val_loss: 0.4729\n",
      "Epoch 4/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.2794 - val_loss: 0.4227\n",
      "Epoch 5/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.2440 - val_loss: 0.3759\n",
      "Epoch 6/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.2455 - val_loss: 0.3660\n",
      "Epoch 7/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.2112 - val_loss: 0.3580\n",
      "Epoch 8/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1928 - val_loss: 0.3326\n",
      "Epoch 9/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1960 - val_loss: 0.3520\n",
      "Epoch 10/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.1780 - val_loss: 0.3280\n",
      "Epoch 11/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1706 - val_loss: 0.3265\n",
      "Epoch 12/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1673 - val_loss: 0.3254\n",
      "Epoch 13/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1657 - val_loss: 0.3110\n",
      "Epoch 14/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1600 - val_loss: 0.3000\n",
      "Epoch 15/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1537 - val_loss: 0.2956\n",
      "Epoch 16/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1520 - val_loss: 0.2827\n",
      "Epoch 17/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1883 - val_loss: 0.3869\n",
      "Epoch 18/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.2020 - val_loss: 0.3722\n",
      "Epoch 19/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1858 - val_loss: 0.2775\n",
      "Epoch 20/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1375 - val_loss: 0.2569\n",
      "Epoch 21/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.1394 - val_loss: 0.2556\n",
      "Epoch 22/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1298 - val_loss: 0.2521\n",
      "Epoch 23/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1282 - val_loss: 0.2468\n",
      "Epoch 24/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1227 - val_loss: 0.2427\n",
      "Epoch 25/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1150 - val_loss: 0.2408\n",
      "Epoch 26/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.1198 - val_loss: 0.2400\n",
      "Epoch 27/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.1161 - val_loss: 0.2525\n",
      "Epoch 28/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1192 - val_loss: 0.2494\n",
      "Epoch 29/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1194 - val_loss: 0.2334\n",
      "Epoch 30/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1332 - val_loss: 0.3278\n",
      "Epoch 31/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1602 - val_loss: 0.3190\n",
      "Epoch 32/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1508 - val_loss: 0.3149\n",
      "Epoch 33/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1475 - val_loss: 0.3095\n",
      "Epoch 34/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1405 - val_loss: 0.2985\n",
      "Epoch 35/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1375 - val_loss: 0.2961\n",
      "Epoch 36/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1400 - val_loss: 0.2964\n",
      "Epoch 37/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1327 - val_loss: 0.2854\n",
      "Epoch 38/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1251 - val_loss: 0.3017\n",
      "Epoch 39/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1248 - val_loss: 0.2747\n",
      "Epoch 40/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.1241 - val_loss: 0.2828\n",
      "Epoch 41/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.1221 - val_loss: 0.2861\n",
      "Epoch 42/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1199 - val_loss: 0.2807\n",
      "Epoch 43/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1210 - val_loss: 0.2676\n",
      "Epoch 44/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1175 - val_loss: 0.2700\n",
      "Epoch 45/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1122 - val_loss: 0.2719\n",
      "Epoch 46/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1107 - val_loss: 0.2628\n",
      "Epoch 47/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1138 - val_loss: 0.2636\n",
      "Epoch 48/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1094 - val_loss: 0.2725\n",
      "Epoch 49/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.1068 - val_loss: 0.2668\n",
      "Epoch 50/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1057 - val_loss: 0.2554\n",
      "Epoch 51/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.1029 - val_loss: 0.2539\n",
      "Epoch 52/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1020 - val_loss: 0.2692\n",
      "Epoch 53/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.1061 - val_loss: 0.2504\n",
      "Epoch 54/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.1018 - val_loss: 0.2568\n",
      "Epoch 55/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1023 - val_loss: 0.2519\n",
      "Epoch 56/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1045 - val_loss: 0.2495\n",
      "Epoch 57/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0976 - val_loss: 0.2522\n",
      "Epoch 58/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.1001 - val_loss: 0.2464\n",
      "Epoch 59/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0958 - val_loss: 0.2520\n",
      "Epoch 60/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0965 - val_loss: 0.2443\n",
      "Epoch 61/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0963 - val_loss: 0.2537\n",
      "Epoch 62/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0932 - val_loss: 0.2508\n",
      "Epoch 63/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0930 - val_loss: 0.2535\n",
      "Epoch 64/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0960 - val_loss: 0.2451\n",
      "Epoch 65/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0941 - val_loss: 0.2503\n",
      "Epoch 66/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0904 - val_loss: 0.2514\n",
      "Epoch 67/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0899 - val_loss: 0.2398\n",
      "Epoch 68/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0887 - val_loss: 0.2396\n",
      "Epoch 69/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0928 - val_loss: 0.2541\n",
      "Epoch 70/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0889 - val_loss: 0.2411\n",
      "Epoch 71/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0872 - val_loss: 0.2485\n",
      "Epoch 72/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0884 - val_loss: 0.2366\n",
      "Epoch 73/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0884 - val_loss: 0.2381\n",
      "Epoch 74/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0861 - val_loss: 0.2452\n",
      "Epoch 75/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0851 - val_loss: 0.2396\n",
      "Epoch 76/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0889 - val_loss: 0.2348\n",
      "Epoch 77/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0821 - val_loss: 0.2410\n",
      "Epoch 78/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.0812 - val_loss: 0.2350\n",
      "Epoch 79/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.0871 - val_loss: 0.2379\n",
      "Epoch 80/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.0889 - val_loss: 0.2378\n",
      "Epoch 81/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0852 - val_loss: 0.2379\n",
      "Epoch 82/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0835 - val_loss: 0.2328\n",
      "Epoch 83/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0804 - val_loss: 0.2367\n",
      "Epoch 84/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0809 - val_loss: 0.2325\n",
      "Epoch 85/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0810 - val_loss: 0.2435\n",
      "Epoch 86/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.0821 - val_loss: 0.2332\n",
      "Epoch 87/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0794 - val_loss: 0.2350\n",
      "Epoch 88/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0825 - val_loss: 0.2281\n",
      "Epoch 89/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0800 - val_loss: 0.2355\n",
      "Epoch 90/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0835 - val_loss: 0.2393\n",
      "Epoch 91/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0825 - val_loss: 0.2356\n",
      "Epoch 92/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0818 - val_loss: 0.2460\n",
      "Epoch 93/100\n",
      "257/257 [==============================] - 1s 4ms/step - loss: 0.0874 - val_loss: 0.2338\n",
      "Epoch 94/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0846 - val_loss: 0.2411\n",
      "Epoch 95/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0829 - val_loss: 0.2441\n",
      "Epoch 96/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0834 - val_loss: 0.2371\n",
      "Epoch 97/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0793 - val_loss: 0.2443\n",
      "Epoch 98/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0786 - val_loss: 0.2458\n",
      "Epoch 99/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0817 - val_loss: 0.2347\n",
      "Epoch 100/100\n",
      "257/257 [==============================] - 1s 5ms/step - loss: 0.0765 - val_loss: 0.2334\n"
     ]
    }
   ],
   "source": [
    "df = augFeatures(df)\n",
    "df = normalize(df)\n",
    "X,Y = buildTrain(df)\n",
    "X_train, Y_train = shuffle(X, Y)\n",
    "X_train, Y_train, X_val, Y_val = splitData(X_train, Y_train, 0.25)\n",
    "model = buildManyToOneModel(X_train.shape)\n",
    "LSTM = model.fit(X_train,Y_train, epochs=100, batch_size=32, validation_data=(X_val, Y_val))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot Train and Valida datasets MSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(LSTM.history['loss'], label='train')\n",
    "plt.plot(LSTM.history['val_loss'], label='valid')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict_point_by_point(model, data):\n",
    "    predicted = model.predict(data)\n",
    "    print('predicted shape:',np.array(predicted).shape) \n",
    "    predicted = np.reshape(predicted, (predicted.size,))\n",
    "    return predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "predicted shape: (8216, 1)\n",
      "predicted shape: (2738, 1)\n",
      "MSE_train: 0.07131692458879947\n",
      "MSE_val: 0.23341304916532163\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "MSE_train = mean_squared_error(Y_train, predict_point_by_point(model, X_train))\n",
    "MSE_val   = mean_squared_error(Y_val, predict_point_by_point(model, X_val))\n",
    "print('MSE_train:', MSE_train)\n",
    "print('MSE_val:', MSE_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
